// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(PharmacyContext))]
    [Migration("20230925140314_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Address")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Description");

                    b.Property<int>("Id_City")
                        .HasColumnType("int");

                    b.Property<int>("Id_person")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_City");

                    b.HasIndex("Id_person");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Buy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_buy")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BuyDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("Buy_date");

                    b.Property<int>("Employee_Id")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Provider_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Employee_Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("Provider_Id");

                    b.ToTable("Buy", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_category")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_city")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_department")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Id_department");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_contact")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Id_contact_category")
                        .HasColumnType("int");

                    b.Property<int>("Id_contact_type")
                        .HasColumnType("int");

                    b.Property<int>("Id_person")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_contact_category");

                    b.HasIndex("Id_contact_type");

                    b.HasIndex("Id_person");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contact_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_contactType")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Contact_type", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contact_category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_contactCategory")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Contact_category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_country")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Department")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_country")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Id_country");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Detail_buy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BuyId")
                        .HasColumnType("int");

                    b.Property<int>("Buy_Id")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Detail_Buys");
                });

            modelBuilder.Entity("Domain.Entities.Detail_sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_medicine")
                        .HasColumnType("int");

                    b.Property<int>("Id_sale")
                        .HasColumnType("int");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("SaleId");

                    b.ToTable("Detail_Sales");
                });

            modelBuilder.Entity("Domain.Entities.Document_type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Document_type")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.ToTable("Document_type", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Employee")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("PositionId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee_eps", b =>
                {
                    b.Property<int>("EpsId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("EpsId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_eps", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Eps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Eps")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_type_eps")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_type_eps");

                    b.ToTable("Eps", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Inventory")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_medicine_info")
                        .HasColumnType("int");

                    b.Property<int>("Stock_total")
                        .HasColumnType("int")
                        .HasColumnName("Stock_total");

                    b.Property<int>("Ubication")
                        .HasColumnType("int")
                        .HasColumnName("Ubication");

                    b.HasKey("Id");

                    b.HasIndex("Id_medicine_info");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Medicine")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_creation")
                        .HasColumnType("DateTime")
                        .HasColumnName("Date_creation");

                    b.Property<DateTime>("Date_expiration")
                        .HasColumnType("DateTime")
                        .HasColumnName("Date_expiration");

                    b.Property<int>("Id_Date_expiration")
                        .HasColumnType("int")
                        .HasColumnName("Id_Date_expiration");

                    b.Property<int>("Id_Inventory")
                        .HasColumnType("int");

                    b.Property<int>("Id_estate")
                        .HasColumnType("int");

                    b.Property<int>("Id_medicine_info")
                        .HasColumnType("int");

                    b.Property<int?>("Medicine_InfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Inventory");

                    b.HasIndex("Id_estate");

                    b.HasIndex("Medicine_InfoId");

                    b.ToTable("Medicine", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Medicine_brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Medicine_brand")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Medicine_brand", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Medicine_info", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Position")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Discount")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Category")
                        .HasColumnType("int");

                    b.Property<int>("Id_MedicineBrand")
                        .HasColumnType("int");

                    b.Property<int>("Id_Presentation")
                        .HasColumnType("int");

                    b.Property<int>("Id_medicine_name")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Need_order")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id_MedicineBrand");

                    b.HasIndex("Id_Presentation");

                    b.ToTable("MedicineInfo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Order")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_expiration")
                        .HasColumnType("DateTime");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EpsId")
                        .HasColumnType("int");

                    b.Property<int>("Id_sale")
                        .HasColumnType("int");

                    b.Property<DateTime>("Order_Date")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("EpsId");

                    b.HasIndex("Id_sale");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Person")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birth_date")
                        .HasColumnType("DateTime")
                        .HasColumnName("Birth_date");

                    b.Property<int>("Id_Document_type")
                        .HasColumnType("int");

                    b.Property<int>("Id_Employe")
                        .HasColumnType("int");

                    b.Property<int>("Id_Eps")
                        .HasColumnType("int");

                    b.Property<int>("Id_Sale")
                        .HasColumnType("int");

                    b.Property<int>("Id_Type_Person")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("Register_date")
                        .HasMaxLength(60)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Register_date");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int?>("Type_PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Document_type");

                    b.HasIndex("Id_Eps");

                    b.HasIndex("SaleId");

                    b.HasIndex("Type_PersonId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Position")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Presentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Presentations");
                });

            modelBuilder.Entity("Domain.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Type_ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("Type_ProviderId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPk")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descriptionRole");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Employee"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role_user", b =>
                {
                    b.Property<int>("Id_user")
                        .HasColumnType("int");

                    b.Property<int>("Id_role")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id_user", "Id_role");

                    b.HasIndex("Id_role");

                    b.ToTable("Role_user");
                });

            modelBuilder.Entity("Domain.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Sale")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha_venta")
                        .HasColumnType("Datetime")
                        .HasColumnName("Fecha_venta");

                    b.Property<int>("Id_Employe")
                        .HasColumnType("int");

                    b.Property<int>("Id_person")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Employe");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_State")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Name_state");

                    b.HasKey("Id");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Type_eps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_type_eps")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("epstypename");

                    b.HasKey("Id");

                    b.ToTable("Type_eps", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Type_person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_type_person")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("Type_person", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Type_provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_type_provider")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Providertypename");

                    b.HasKey("Id");

                    b.ToTable("Type_provider", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPk")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("accessTokenUser");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("emailUser");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("passwordUser");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId1")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("refreshTokenUser");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("usernameUser");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1")
                        .IsUnique();

                    b.HasIndex("UserName", "Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Username_Email");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("Id_City")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("Id_person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Buy", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Buys")
                        .HasForeignKey("Employee_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", null)
                        .WithMany("Buys")
                        .HasForeignKey("PersonId");

                    b.HasOne("Domain.Entities.Provider", "Provider")
                        .WithMany("Buys")
                        .HasForeignKey("Provider_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Cities")
                        .HasForeignKey("Id_department")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.HasOne("Domain.Entities.Contact_category", "Contact_Category")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_contact_category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contact_Type", "Contact_Type")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_contact_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Contacts")
                        .HasForeignKey("Id_person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact_Category");

                    b.Navigation("Contact_Type");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Departments")
                        .HasForeignKey("Id_country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Detail_buy", b =>
                {
                    b.HasOne("Domain.Entities.Buy", "Buy")
                        .WithMany("Detail_Buys")
                        .HasForeignKey("BuyId");

                    b.HasOne("Domain.Entities.Medicine", "Medicine")
                        .WithMany("Detail_Buys")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buy");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Domain.Entities.Detail_sale", b =>
                {
                    b.HasOne("Domain.Entities.Medicine", "Medicine")
                        .WithMany("Detail_Sales")
                        .HasForeignKey("MedicineId");

                    b.HasOne("Domain.Entities.Sale", "Sale")
                        .WithMany("Detail_Sales")
                        .HasForeignKey("SaleId");

                    b.Navigation("Medicine");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("Domain.Entities.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Domain.Entities.Employee_eps", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Employee_Epss")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Eps", "Eps")
                        .WithMany("Employee_Epss")
                        .HasForeignKey("EpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Eps");
                });

            modelBuilder.Entity("Domain.Entities.Eps", b =>
                {
                    b.HasOne("Domain.Entities.Type_eps", "Type_Eps")
                        .WithMany("Epss")
                        .HasForeignKey("Id_type_eps")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type_Eps");
                });

            modelBuilder.Entity("Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Domain.Entities.Medicine_info", "Medicine_Info")
                        .WithMany("Inventories")
                        .HasForeignKey("Id_medicine_info")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine_Info");
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.HasOne("Domain.Entities.Inventory", "Inventory")
                        .WithMany("Medicines")
                        .HasForeignKey("Id_Inventory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("Medicines")
                        .HasForeignKey("Id_estate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicine_info", "Medicine_Info")
                        .WithMany()
                        .HasForeignKey("Medicine_InfoId");

                    b.Navigation("Inventory");

                    b.Navigation("Medicine_Info");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.Medicine_info", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Medicine_Infos")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Entities.Medicine_brand", "Medicine_brand")
                        .WithMany("Medicine_Infos")
                        .HasForeignKey("Id_MedicineBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Presentation", "Presentation")
                        .WithMany("Medicine_Infos")
                        .HasForeignKey("Id_Presentation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Medicine_brand");

                    b.Navigation("Presentation");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Eps", "Eps")
                        .WithMany("Orders")
                        .HasForeignKey("EpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sale", "Sale")
                        .WithMany("Orders")
                        .HasForeignKey("Id_sale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eps");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.HasOne("Domain.Entities.Document_type", "Document_type")
                        .WithMany("Persons")
                        .HasForeignKey("Id_Document_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Eps", "Eps")
                        .WithMany("Persons")
                        .HasForeignKey("Id_Eps")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sale", "Sale")
                        .WithMany("People")
                        .HasForeignKey("SaleId");

                    b.HasOne("Domain.Entities.Type_person", "Type_Person")
                        .WithMany("Person")
                        .HasForeignKey("Type_PersonId");

                    b.Navigation("Document_type");

                    b.Navigation("Eps");

                    b.Navigation("Sale");

                    b.Navigation("Type_Person");
                });

            modelBuilder.Entity("Domain.Entities.Provider", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Providers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Type_provider", "Type_Provider")
                        .WithMany("Provider")
                        .HasForeignKey("Type_ProviderId");

                    b.Navigation("Person");

                    b.Navigation("Type_Provider");
                });

            modelBuilder.Entity("Domain.Entities.Role_user", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Role_Users")
                        .HasForeignKey("Id_role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Role_users")
                        .HasForeignKey("Id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Sale", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("Id_Employe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Users")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", null)
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.User", "PersonId1");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Buy", b =>
                {
                    b.Navigation("Detail_Buys");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Medicine_Infos");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Contact_Type", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.Contact_category", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Document_type", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("Buys");

                    b.Navigation("Employee_Epss");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Domain.Entities.Eps", b =>
                {
                    b.Navigation("Employee_Epss");

                    b.Navigation("Orders");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Domain.Entities.Inventory", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.Navigation("Detail_Buys");

                    b.Navigation("Detail_Sales");
                });

            modelBuilder.Entity("Domain.Entities.Medicine_brand", b =>
                {
                    b.Navigation("Medicine_Infos");
                });

            modelBuilder.Entity("Domain.Entities.Medicine_info", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Buys");

                    b.Navigation("Contacts");

                    b.Navigation("Employee");

                    b.Navigation("Providers");

                    b.Navigation("User");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Presentation", b =>
                {
                    b.Navigation("Medicine_Infos");
                });

            modelBuilder.Entity("Domain.Entities.Provider", b =>
                {
                    b.Navigation("Buys");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Role_Users");
                });

            modelBuilder.Entity("Domain.Entities.Sale", b =>
                {
                    b.Navigation("Detail_Sales");

                    b.Navigation("Orders");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Domain.Entities.Type_eps", b =>
                {
                    b.Navigation("Epss");
                });

            modelBuilder.Entity("Domain.Entities.Type_person", b =>
                {
                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Type_provider", b =>
                {
                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Role_users");
                });
#pragma warning restore 612, 618
        }
    }
}
