1. Obtener todos los medicamentos con menos de 50 unidades en stock.  = HECHA By angel  V
2. Listar los proveedores con su información de contacto en medicamentos.  = HECHA by angel 
3. Medicamentos comprados al ‘Proveedor A’. = Hecha by angel
4. Obtener recetas médicas emitidas después del  1 de enero de 2023. HECHA by kevin and angel
5. Total de ventas del medicamento ‘Paracetamol’.   V
6. Medicamentos que caducan antes del 1 de enero de 2024. =  HECHA by angel V 
7. Total de medicamentos vendidos por cada proveedor. V  
8. Cantidad total de dinero recaudado por las ventas de medicamentos.   V
9. Medicamentos que no han sido vendidos.   V
10. Obtener el medicamento más caro.     V
11. Número de medicamentos por proveedor.   V
12. Pacientes que han comprado Paracetamol. V
13. Proveedores que no han vendido medicamentos en el último año. V
14. Obtener el total de medicamentos vendidos en marzo de 2023. V
15. Obtener el medicamento menos vendido en 2023. V 
17. Promedio de medicamentos comprados por venta. = Hecha by angel  V 
18. Cantidad de ventas realizadas por cada empleado en 2023. = HECHA By angel  
19. Obtener todos los medicamentos que expiren en 2024.  = Hecha by angel
20. Empleados que hayan hecho más de 5 ventas en total. V
21. Medicamentos que no han sido vendidos nunca. V
23. Empleados que no han realizado ninguna venta en 2023. V 
24. Proveedor que ha suministrado más medicamentos en 2023. V
25. Pacientes que compraron el medicamento “Paracetamol” en 2023. V
26. Total de medicamentos vendidos por mes en 2023. V
27. Empleados con menos de 5 ventas en 2023. V
28. Número total de proveedores que suministraron medicamentos en 2023. V
29. Proveedores de los medicamentos con menos de 50 unidades en stock. V
31. Medicamentos que han sido vendidos cada mes del año 2023. V
34. Medicamentos que no han sido vendidos en 2023. V
36. Total de medicamentos vendidos en el primer trimestre de 2023. V
37. Empleados que no realizaron ventas en abril de 2023. V
38. Medicamentos con un precio mayor a 50 y un stock menor a 100. V

Faltan


//*16. Ganancia total por proveedor en 2023 (asumiendo un campo precioCompra en Compras).
public async Task<IEnumerable<object>> ProfitsPerSupplier(ProfitsPerSupplierModel data = null){

        var medicines =  await (
            from detail in _Context.Set<ShoppingDetail>()
            join medicine in _Context.Set<Medicine>() on detail.MedicineId equals medicine.Id
            join inventory in _Context.Set<Inventory>() on medicine.InventoryId equals inventory.Id
            join info in _Context.Set<MedicineInfo>() on  inventory.MedicineInfoId equals info.Id
            join shopping in _Context.Set<Shopping>() on detail.ShoppingId equals shopping.Id
            join supplier in _Context.Set<Supplier>() on shopping.SupplierId equals supplier.Id
            join person in _Context.Set<Person>() on supplier.PersonId equals person.Id
            let Price = info.Price - (info.Price * (info.Discount / 100))
            select new {
                person.Name,
                Price,
                Date = shopping.ShoppingDate
            }
        ).ToListAsync();

        if(data?.InitialDate != null ){
            if( data?.FinalDate != null && data.InitialDate < data.FinalDate){
                medicines = medicines.Where(x => 
                    x.Date <= data.FinalDate  && 
                    x.Date >= data.InitialDate
                ).ToList();
            }else {
                medicines = medicines.Where(x => x.Date >= data.InitialDate ).ToList();
            } 
        }

        var res =  from supplier in medicines
            group supplier by supplier.Name into supplierGroup
            let Units = supplierGroup.Count()
            let Total = supplierGroup.Sum(x => x.Price)
            select new {
                supplierGroup.First().Name,
                Units,
                Total = Total.ToString("c")
            };

        if(data?.ProviderName != null){
            return res.Where(x => x.Name.Trim().ToLower() == data.ProviderName.Trim().ToLower() );
        }
        return res;
    }
    
//* 22. Paciente que ha gastado más dinero en 2023.
public async Task<object> VipBuyer(){

        var query = await (from person in _Context.Set<Person>()
            join sale in _Context.Set<Sale>() on person.Id equals sale.PersonId
            join saleDetail in _Context.Set<SaleDetail>() on sale.Id equals saleDetail.SaleId
            join medicine in _Context.Set<Medicine>() on saleDetail.MedicineId equals medicine.Id
            join inventory in _Context.Set<Inventory>() on medicine.Id equals inventory.MedicineInfoId
            join medicineInfo in _Context.Set<MedicineInfo>() on inventory.MedicineInfoId equals medicineInfo.Id
            group medicineInfo.Price by new { person.Id, person.Name } into g
            orderby g.Sum() descending
            select new
            {
                IdPk = g.Key.Id,
                g.Key.Name,
                TotalPrice = g.Sum()
            }).ToListAsync();

        return query.FirstOrDefault();
    }



//*30. Pacientes que no han comprado ningún medicamento en 2023. 
public async Task<IEnumerable<object>> PersonNoPurchasedYear(int year)
        {
            var listSales = _Context.Set<Sale>();

            var query = (
                            from person in _Context.Set<Person>()
                            join sale in listSales on person.Id equals sale.PersonId
                            join saleDetail in _Context.Set<SaleDetail>() on sale.Id equals saleDetail.SaleId
                            join medicine in _Context.Set<Medicine>() on saleDetail.MedicineId equals medicine.Id
                            join inventory in _Context.Set<Inventory>() on medicine.Id equals inventory.MedicineInfoId
                            join medicineInfo in _Context.Set<MedicineInfo>() on inventory.MedicineInfoId equals medicineInfo.Id
                            where !listSales.Any(s => s.PersonId == person.Id && s.SaleDate.Year == year)
                                                    select new
                                                    {
                                                        PersonId = person.Id,
                                                        person.Name
                                                        
                                                    }).ToListAsync();

            return await query;
        }


//*32. Empleado que ha vendido la mayor cantidad de medicamentos distintos en 2023. 
    public async Task<IEnumerable<object>> EmployeesWhoHaveProvidedDifferentMedications(WhoHaveProvidedDifferentMedicationsModel data = null){
        data ??= new(){
                MinimumNumberOfDifferentMedications = 0
            }; 
          var medicines =  await (from detail in _Context.Set<SaleDetail>()
            join sale in _Context.Set<Sale>() on detail.SaleId equals sale.Id
            join employee in _Context.Set<Employee>() on sale.EmployeeId equals employee.Id
            join person in _Context.Set<Person>() on employee.PersonId equals person.Id
            join medicine in _Context.Set<Medicine>() on detail.MedicineId equals medicine.Id
            join inventory in _Context.Set<Inventory>() on medicine.InventoryId equals inventory.Id
            join info in _Context.Set<MedicineInfo>() on inventory.MedicineInfoId equals info.Id
            select new {
                Employee = person.Name,
                info.Name,                
                sale.SaleDate
            }).ToListAsync();

        if(data?.InitialDate != null ){
            if( data?.FinalDate != null && data.InitialDate < data.FinalDate){
                medicines = medicines.Where(x => 
                    x.SaleDate <= data.FinalDate  && 
                    x.SaleDate >= data.InitialDate
                ).ToList();
            }else {
                medicines = medicines.Where(x => x.SaleDate >= data.InitialDate ).ToList();
            } 
        }

        return from medicine in medicines
            group medicine by medicine.Employee into supplierGrups
            let medicineGroups = from supplierGrup in supplierGrups
                group supplierGrup by supplierGrup.Name into medicineGroups
                let TotalMedicines = medicineGroups.Count()
                select new {
                    medicineGroups.First().Name,
                    TotalMedicines
                }
            let TotalMedications = medicineGroups.Sum(a => a.TotalMedicines)
            let NumberOfDifferentMedications = medicineGroups.Count()
            where NumberOfDifferentMedications >= data.MinimumNumberOfDifferentMedications
            select new {
                supplierGrups.First().Employee,
                TotalMedications,
                NumberOfDifferentMedications,
                Medications = medicineGroups
            };
    }

//*33. Total gastado por cada paciente en 2023.
public async Task<IEnumerable<object>> AllSaleCustomer(int year){

        var query = await (from person in _Context.Set<Person>()
            join sale in _Context.Set<Sale>() on person.Id equals sale.PersonId
            join saleDetail in _Context.Set<SaleDetail>() on sale.Id equals saleDetail.SaleId
            join medicine in _Context.Set<Medicine>() on saleDetail.MedicineId equals medicine.Id
            join inventory in _Context.Set<Inventory>() on medicine.Id equals inventory.MedicineInfoId
            join medicineInfo in _Context.Set<MedicineInfo>() on inventory.MedicineInfoId equals medicineInfo.Id
            where sale.SaleDate.Year == year
            group medicineInfo.Price by new { person.Id, person.Name, sale.SaleDate } into g
            orderby g.Sum() descending
            select new
            {
                Id = g.Key.Id,
                g.Key.Name,
                YearSales = g.Key.SaleDate,
                TotalPrice = g.Sum()

            }).ToListAsync();

            return query;
        }



//*35. Proveedores que han suministrado al menos 5 medicamentos diferentes en 2023.
    public async Task<IEnumerable<object>> ProvidersWhoHaveProvidedDifferentMedications(WhoHaveProvidedDifferentMedicationsModel data = null){
        data ??= new(){
                MinimumNumberOfDifferentMedications = 0
            };
        var medicines =  await (from detail in _Context.Set<ShoppingDetail>()
            join shopping in _Context.Set<Shopping>() on detail.ShoppingId equals shopping.Id
            join supplier in _Context.Set<Supplier>() on shopping.SupplierId equals supplier.Id
            join person in _Context.Set<Person>() on supplier.PersonId equals person.Id
            join medicine in _Context.Set<Medicine>() on detail.MedicineId equals medicine.Id
            join inventory in _Context.Set<Inventory>() on medicine.InventoryId equals inventory.Id
            join info in _Context.Set<MedicineInfo>() on inventory.MedicineInfoId equals info.Id
            select new {
                Supplier = person.Name,
                info.Name,                
                shopping.ShoppingDate,
            }).ToListAsync();

        if(data?.InitialDate != null ){
            if( data?.FinalDate != null && data.InitialDate < data.FinalDate){
                medicines = medicines.Where(x => 
                    x.ShoppingDate <= data.FinalDate  && 
                    x.ShoppingDate >= data.InitialDate
                ).ToList();
            }else {
                medicines = medicines.Where(x => x.ShoppingDate >= data.InitialDate ).ToList();
            } 
        }

        return from medicine in medicines
            group medicine by medicine.Supplier into supplierGrups
            let medicineGroups = from supplierGrup in supplierGrups
                group supplierGrup by supplierGrup.Name into medicineGroups
                let TotalMedicines = medicineGroups.Count()
                select new {
                    medicineGroups.First().Name,
                    TotalMedicines
                }
            let TotalMedications = medicineGroups.Sum(a => a.TotalMedicines)
            let NumberOfDifferentMedications = medicineGroups.Count()
            where NumberOfDifferentMedications >= data.MinimumNumberOfDifferentMedications
            select new {
                supplierGrups.First().Supplier,
                TotalMedications,
                NumberOfDifferentMedications,
                Medications = medicineGroups
            };
    }